{"version":3,"file":"modal.bundle.js","sources":["webpack:///./client/components/Containers/TaskDetailedViewContainer.tsx","webpack:///./client/components/Presentation/TaskDetailedView.tsx"],"sourcesContent":["import React, { Fragment } from \"react\"\nimport { Paper, Container, Badge } from \"@material-ui/core\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport TaskDetailedView from \"../Presentation/TaskDetailedView\"\nimport { connect } from \"react-redux\"\nimport { ITask, IReduxState } from \"../../Schema/state\"\nimport { closeModal } from \"../../redux/actions/modalActions\"\nimport { addTask } from \"../../redux/actions/taskActions\"\n\ninterface ITaskDetailedViewContainer {\n  onExit: any;\n  onSubmit: any;\n  utility: any; // state.utility\n  tasks: any; // state.tasks\n}\n\nconst TaskDetailedViewContainer = (props: ITaskDetailedViewContainer) => {\n  const classes = useStyle()\n\n  return (\n    <Fragment>\n      <Container className={classes.container} maxWidth=\"sm\">\n        <Paper className={classes.texture} variant=\"outlined\" elevation={5}>\n          <TaskDetailedView id={props.utility.modal.index} task={props.utility.modal.task} onSubmit={props.onSubmit} onExit={props.onExit} />\n        </Paper>\n      </Container>\n    </Fragment>\n  )\n}\n\nconst useStyle = makeStyles((theme) => ({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    height: \"100vh\",\n    width: \"100vw\"\n  },\n  texture: {\n    opacity: 0.9\n  }\n}))\n\nconst mapStateToProps = (state: IReduxState) => ({\n  utility: state.utility,\n  tasks: state.tasks\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  onExit: () => dispatch(closeModal),\n  onSubmit: (id: number = -1, task: ITask) => {\n    dispatch(addTask(id, task))\n    dispatch(closeModal)\n  }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskDetailedViewContainer)","import React, { useState } from \"react\"\nimport { Box, Container, TextField, Button, Paper, Input, FormLabel, Chip, IconButton, Typography, Tooltip } from \"@material-ui/core\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport AddIcon from '@material-ui/icons/Add'\nimport TaskProgress from \"./TaskProgress\"\nimport { useFormik } from \"formik\"\nimport { ITaskState, ITask } from \"../../Schema/state\"\nimport * as Yup from \"yup\"\nimport { defaultTask } from \"../../Schema/defaults\"\nimport Tags from \"./Tags\"\n\ninterface ITaskDetailedView {\n  onSubmit: any;\n  onExit: any;\n  task?: ITask;\n  id?: number;\n}\n\nexport default (props: ITaskDetailedView) => {\n  const [tagInput, setTagInput] = useState(\"\")\n\n  const formik = useFormik({\n    initialValues: Object.assign({}, defaultTask, props.id !== -1 ? props.task : {}),\n    onSubmit: ((values: ITask) => {\n      props.onSubmit(props.id, values)\n    }),\n    validationSchema: TaskFormSchema,\n    validateOnBlur: true,\n    validateOnChange: true,\n    validateOnMount: false\n  })\n\n  const addTag = (name: string) => {\n    formik.setFieldTouched(\"tags\", true, true)\n    TagLabelSchema.validate(name) // Yup schema validation on tag input\n      .then((value) => {\n        formik.setFieldError(\"tags\", undefined) // no error\n        formik.setFieldValue(\"tags\", [...formik.values.tags, value], true)\n        setTagInput(\"\") // empty input\n      }).catch(err => {\n        // handle validation error\n        formik.setFieldError(\"tags\", err.message)\n      })\n  }\n\n  const deleteTag = (id: number) => {\n    let values = formik.values.tags.filter((value, index) => index !== id)\n    formik.setFieldValue(\"tags\", values, true)\n  }\n\n  const updateProgress = (value: number) => {\n    ProgressSchema.validate(value)\n      .then((value) => {\n        formik.setFieldValue(\"progress\", value, false)\n      })\n      .catch(err => console.log(err.message))\n  }\n\n  return (\n    <React.Fragment>\n      <Container>\n        <form onSubmit={formik.handleSubmit} onReset={formik.handleReset}>\n          <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"flex-start\" alignItems=\"center\">\n            <Box my={1} py={2} width=\"50%\" display=\"flex\" justifyContent=\"center\" flexDirection=\"column\" alignItems=\"center\">\n              <Tooltip title={formik.errors.title ? formik.errors.title : \"Required\"}>\n                <span>\n                  <Input id=\"task-title\" name=\"title\" onChange={formik.handleChange} value={formik.values.title} error={formik.errors.title && formik.touched.title ? true : false} placeholder=\"Title\"/>\n                </span>\n              </Tooltip>\n            </Box>\n            <Box width=\"80%\" my={1} py={2}>\n              <Input id=\"task-description\" name=\"description\" placeholder=\"Description\" value={formik.values.description} onChange={formik.handleChange} multiline={true} fullWidth={true} />\n            </Box>\n            <Box my={1} py={2} width=\"100%\" display=\"flex\" justifyContent=\"center\" flexDirection=\"column\" alignItems=\"center\"> \n              <Box width=\"50%\" display=\"flex\" justifyContent=\"center\" flexWrap=\"wrap\">\n                <Input error={formik.errors.tags && formik.touched.tags ? true : false} id=\"add-tag\" inputProps={{maxLength: 10}} name=\"tag-input\" placeholder=\"Add Tag\" value={tagInput} onChange={(e) => setTagInput(e.target.value)}/>\n                <Tooltip title={formik.errors.tags && formik.touched.tags ? formik.errors.tags : \"Add\"} >\n                  <IconButton onClick={() => addTag(tagInput)}>\n                    <AddIcon />\n                  </IconButton>\n                </Tooltip>\n              </Box>\n              <Box width=\"80%\" display=\"flex\" justifyContent=\"center\" flexWrap=\"wrap\">\n                <Tags tags={formik.values.tags} container={{mx: 1, mt:1}} element={{color: \"primary\", onDelete: (id) => deleteTag(id)}} />\n              </Box>\n            </Box>\n            <Box my={1} py={2} width=\"50%\">\n              <TaskProgress name=\"progress\" value={formik.values.progress} onChangeCommitted={(event, value) => updateProgress(value)} />\n            </Box>\n          </Box>\n          <Box my={1} width=\"100%\" display=\"flex\" justifyContent=\"center\">\n            <Button color=\"secondary\" variant=\"text\" size=\"small\" type=\"reset\" onClick={() => props.onExit()}>\n              <Box color=\"error.main\"><Typography variant=\"inherit\">Exit</Typography></Box>\n            </Button>\n            <Button color=\"primary\" variant=\"contained\" size=\"small\" type=\"submit\">\n              Submit\n            </Button>\n          </Box>\n        </form>\n      </Container>\n    </React.Fragment>\n  )\n}\n\nconst TagLabelSchema = Yup.string().min(1, \"Tag must have contents\").max(10, \"Tag label cannot exceed 10 characters\")\n\nconst ProgressSchema = Yup.number().min(0).max(4)\n\n// Form input validation schema\nconst TaskFormSchema = Yup.object().shape({\n  title: Yup.string().required(\"This field is required\"),\n  description: Yup.string(),\n  tags: Yup.array().of(TagLabelSchema),\n  progress: ProgressSchema\n})"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AADA;AARA;AAWA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AALA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AASA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAQA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;;;;A","sourceRoot":""}